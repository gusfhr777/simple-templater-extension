<%*class te { constructor(tp) { this.tR = ''; try { this.vault = app.vault; this.fs = this.vault.adapter.fs; this.path = this.vault.adapter.path; this.tp = tp; this.basePath = this.vault.adapter.basePath; this.state = "vault"; this.file = tp.file; this.config = tp.config; this.date = tp.date; this.frontmatter = tp.frontmatter; this.hooks = tp.hooks; this.system = tp.system; this.web = tp.web; this.obsidian = tp.obsidian; } catch (e) { this.fs = require('fs'); this.state = "nodejs"; } } __report(msg) { console.error(msg); this.state == "nodejs" ? this.tR += msg : tR += msg; } getFrontmatter(path) { if (!this.fs.existsSync(path)) return this.__report("ERR: file does not exist."), null; const fileContent = this.fs.readFileSync(path, 'utf-8'), frontmatterMatch = fileContent.match(/^---([\s\S]*?)---/); if (!frontmatterMatch) return this.__report("ERR: frontmatter does not exist or match error."), null; return frontmatterMatch[1].split('\n').reduce((acc, line) => line.trim() ? (acc[line.split(":")[0].trim()] = line.split(":")[1].trim(), acc) : acc, {}); } saveFrontmatter(path, frontmatter) { if (!this.fs.existsSync(path)) return this.__report("ERR: file does not exist."); setTimeout(() => this.fs.writeFileSync(path, this.fs.readFileSync(path, 'utf8').replace(/^---([\s\S]*?)---/, `---\n${Object.entries(frontmatter).map(([k, v]) => `${k}: ${v}`).join('\n')}\n---`), 'utf8'), 100); } getFilePath(filename) { return this.path.join(this.basePath, this.tp.file.find_tfile(filename).path); } } tp = new te(tp);%>
